package structmorph

import (
	"bytes"
	"fmt"
	"go/ast"
	"io"
	"log/slog"
	"os"
	"strings"
	"text/template"

	"golang.org/x/tools/go/packages"
	"golang.org/x/tools/imports"
)

const tmpl = `// Code generated by structmorph; DO NOT EDIT.

package {{.ToPkg}}

{{if ne .FromPkg "main"}}import "{{.FromPkgPath}}"{{end}}

func {{.FuncNameToDTO}}(src {{if ne .FromPkg "main"}}{{.FromPkg}}.{{end}}{{.From}}) {{.To}} {
	return {{.To}}{
		{{range .Fields}}{{.ToField.Name}}: src.{{.FromField}},
		{{end}}
	}
}

func {{.FuncNameToStruct}}(src {{.To}}) {{if ne .FromPkg "main"}}{{.FromPkg}}.{{end}}{{.From}} {
	return {{if ne .FromPkg "main"}}{{.FromPkg}}.{{end}}{{.From}}{
		{{range .Fields}}{{.FromField}}: src.{{.ToField.Name}},
		{{end}}
	}
}
`

func Generate(from, to string) error {
	fromStructName, err := ParseStructName(from)
	if err != nil {
		return err
	}
	toStructName, err := ParseStructName(to)
	if err != nil {
		return err
	}

	fromStruct, err := FindAndParseStructFrom(fromStructName)
	if err != nil {
		return err
	}
	slog.Info("Found and parsed struct", slog.Any("struct", fromStruct))

	toStruct, err := FindAndParseStructTo(toStructName)
	if err != nil {
		return err
	}
	slog.Info("Found and parsed struct", slog.Any("struct", toStruct))

	fields, err := CreateMapping(fromStruct, toStruct)
	if err != nil {
		return err
	}

	data := TemplateData{
		FuncNameToDTO:    fmt.Sprintf("ConvertTo%s", toStructName.Name),
		FuncNameToStruct: fmt.Sprintf("ConvertTo%s", fromStructName.Name),
		FromPkg:          fromStruct.Package,
		FromPkgPath:      fromStruct.ImportPath,
		From:             fromStruct.Name,
		To:               toStruct.Name,
		ToPkg:            toStruct.Package,
		Fields:           fields,
	}

	buff := &bytes.Buffer{}
	err = data.GenerateCode(buff)
	if err != nil {
		return fmt.Errorf("error generating code: %w", err)
	}

	fileName := fromStruct.FileName()
	err = FormatAndWrite(buff, fileName)
	if err != nil {
		return fmt.Errorf("error formatting and writing code: %w", err)
	}

	slog.Info("Generated and formatted code", "file", fileName)
	return nil
}

type StructName struct {
	Package string
	Name    string
}

func ParseStructName(rawName string) (StructName, error) {
	rawName = strings.TrimSpace(rawName)
	if rawName == "" {
		return StructName{}, fmt.Errorf("empty input")
	}

	parts := strings.Split(rawName, ".")
	if len(parts) == 1 {
		return StructName{
			Package: "main",
			Name:    parts[0],
		}, nil
	}

	if len(parts) != 2 {
		return StructName{}, fmt.Errorf("invalid format for --from or --to. Expected 'package.StructName'")
	}
	return StructName{
		Package: parts[0],
		Name:    parts[1],
	}, nil
}

type ToStructType struct {
	StructName
	Fields []ToFieldType
}

type FromStructType struct {
	StructName
	ImportPath string
	Fields     map[string]string
}

func FindAndParseStructTo(name StructName) (ToStructType, error) {
	result := &ToStructType{StructName: name}
	return *result, findStruct(name, func(name StructName, pkg *packages.Package, spec *ast.TypeSpec) {
		result.extractFields(spec)
	})
}

func FindAndParseStructFrom(name StructName) (FromStructType, error) {
	result := &FromStructType{StructName: name}
	return *result, findStruct(name, func(name StructName, pkg *packages.Package, spec *ast.TypeSpec) {
		result.ImportPath = pkg.PkgPath
		result.extractFields(spec)
	})
}

type parseStructTypeFunc func(name StructName, pkg *packages.Package, spec *ast.TypeSpec)

func findStruct(name StructName, parser parseStructTypeFunc) error {
	cfg := &packages.Config{
		//todo убрать потом то что не нужно
		Mode: packages.NeedFiles | packages.NeedSyntax | packages.NeedTypes | packages.NeedCompiledGoFiles | packages.NeedDeps | packages.NeedImports,
	}
	pkgs, err := packages.Load(cfg, "./...")
	if err != nil {
		return fmt.Errorf("error loading packages: %w", err)
	}

	var found bool
	for _, pkg := range pkgs {
		for _, file := range pkg.Syntax {
			ast.Inspect(file, func(n ast.Node) bool {
				switch node := n.(type) {
				case *ast.GenDecl:
					for _, spec := range node.Specs {
						if t, ok := spec.(*ast.TypeSpec); ok && t.Name.Name == name.Name {
							filePath := pkg.Fset.Position(file.Pos()).Filename
							parser(name, pkg, t)
							found = true
							slog.Info("Struct found in file", "struct", name, "file", filePath, "importPath", pkg.PkgPath)
							return false
						}
					}
				}
				return true
			})
		}
	}

	if !found {
		return fmt.Errorf("struct not found")
	}

	return nil
}

func (t *FromStructType) extractFields(spec *ast.TypeSpec) {
	list := spec.Type.(*ast.StructType).Fields.List
	fields := make(map[string]string, len(list))
	for _, field := range list {
		fieldName := field.Names[0].Name
		fieldType := fmt.Sprintf("%s", field.Type)
		fields[fieldName] = fieldType
	}
	t.Fields = fields
}

type ToFieldType struct {
	Name      string
	Type      string
	FromField string
}

func (s *ToStructType) extractFields(t *ast.TypeSpec) {
	list := t.Type.(*ast.StructType).Fields.List
	fields := make([]ToFieldType, 0, len(list))
	for _, field := range list {
		fieldName := field.Names[0].Name
		fieldType := ToFieldType{
			Name:      fieldName,
			Type:      fmt.Sprintf("%s", field.Type),
			FromField: fieldName,
		}

		if field.Tag != nil {
			tag := field.Tag.Value
			if strings.HasPrefix(tag, "`morph:") {
				tagValue := strings.Trim(tag, "`")
				tagValue = strings.TrimPrefix(tagValue, "morph:\"")
				tagValue = strings.TrimSuffix(tagValue, "\"")
				fieldType.FromField = tagValue
			}
		}

		//}
		//for _, tag := range field.Names[0].Obj.Decl.(*ast.Field).Tag.Value {
		// find tag starts with `morph:"`
		fields = append(fields, fieldType)
	}

	s.Fields = fields
}

type FieldMapping struct {
	FromField string
	ToField   ToFieldType
}

func CreateMapping(fromStruct FromStructType, toStruct ToStructType) ([]FieldMapping, error) {
	var fields []FieldMapping
	for _, toField := range toStruct.Fields {
		fromField := toField.FromField
		fromFieldType, ok := fromStruct.Fields[fromField]
		if !ok || fromFieldType != toField.Type {
			return nil, fmt.Errorf("field not found or type mismatch, field: %s, type: %+v, struct: %s", fromField, toField, fromStruct.Name)
		}
		fields = append(fields, FieldMapping{
			FromField: fromField,
			ToField:   toField,
		})
	}

	return fields, nil
}

func FormatAndWrite(buff *bytes.Buffer, fileName string) error {
	// Run goimports on the generated file
	formattedSource, err := imports.Process(fileName, buff.Bytes(), nil)
	if err != nil {
		slog.Error("Error running goimports on generated file", "error", err)
		// Write the unformatted source to the file anyway, so the user can see what went wrong
		formattedSource = buff.Bytes()
	}

	// Write the formatted source back to the file
	err = os.WriteFile(fileName, formattedSource, 0644)
	if err != nil {
		return fmt.Errorf("error writing formatted source to file: %w", err)
	}

	return nil
}

type TemplateData struct {
	FuncNameToDTO    string
	FuncNameToStruct string
	FromPkg          string
	FromPkgPath      string
	From             string
	ToPkg            string
	To               string
	Fields           []FieldMapping
}

func (data TemplateData) GenerateCode(output io.Writer) error {
	t := template.Must(template.New("morph").Parse(tmpl))
	err := t.Execute(output, data)
	if err != nil {
		return fmt.Errorf("error executing template: %w", err)
	}

	return nil
}

func (t FromStructType) FileName() string {
	return fmt.Sprintf("morph_%s.go", strings.ToLower(t.Name))
}
